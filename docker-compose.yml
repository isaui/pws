services:
  db:
    container_name: db-pemasak
    image: postgres:16.0-alpine3.18
    env_file: .env
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGPORT: ${DB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${DB_NAME}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - pemasak
    ports:
      - "${DB_PORT}:${DB_PORT}"

  server:
    # container_name: server-pemasak
    restart: always
    env_file: .env
    build:
      context: .
      dockerfile: Dockerfile
    # ports:
    #   - "8080:8080"
    expose:
      - "8080"
    environment:
      - "GIT_BASE=./git-repo"
    volumes:
      - ./configuration.yml:/app/configuration.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./git-repo:/app/git-repo
    depends_on:
      db:
        condition: service_started
    networks:
      - pemasak
    deploy:
      replicas: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pws.rule=Host(`${DOMAIN:-localhost}`) || Host(`www.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.pws.entrypoints=websecure"
      - "traefik.http.routers.pws.tls.certresolver=buypass"
      - "traefik.http.services.pws.loadbalancer.server.port=8080"
      - "traefik.http.services.pws.loadbalancer.sticky.cookie=true"
      - "traefik.http.services.pws.loadbalancer.sticky.cookie.name=server-sticky"
      # Health check disabled for now, can be added later y
      # - "traefik.http.services.pws.loadbalancer.healthcheck.path=/health"
      # - "traefik.http.services.pws.loadbalancer.healthcheck.interval=30s"
  # Skip monitoring stack for Windows (Optional)
  prometheus:
    image: prom/prometheus
    container_name: prometheus-pemasak
    restart: always
    networks:
      - pemasak
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=180d"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prom_data:/prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter-pemasak
    restart: always
    networks:
      - pemasak
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-pemasak
    restart: always
    env_file: .env
    networks:
      - pemasak
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      # Renderer disabled for Windows - no renderer service
    volumes:
      - ./config/grafana:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=buypass"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"

  portainer:
    container_name: portainer-pemasak
    image: portainer/portainer-ce:latest
    restart: always
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer-data:/data
    networks:
      - pemasak
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer.rule=Host(`portainer.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=buypass"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"

  docs-ui:
    container_name: docs-ui-pemasak
    build:
      context: ./docs-ui
      dockerfile: Dockerfile
    restart: always
    environment:
      - PORT=3001
    ports:
      - "3001:3001"
    networks:
      - pemasak
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.docs.rule=Host(`docs.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.docs.entrypoints=websecure"
      - "traefik.http.routers.docs.tls.certresolver=buypass"
      - "traefik.http.services.docs.loadbalancer.server.port=3001"

  traefik:
    container_name: traefik-pemasak
    image: traefik:v3.3
    env_file: .env
    command: 
      - --api.insecure=true
      - --providers.docker
      - --accesslog=true
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --certificatesresolvers.buypass.acme.httpchallenge=true
      - --certificatesresolvers.buypass.acme.httpchallenge.entrypoint=web
      - --certificatesresolvers.buypass.acme.email=${ACME_EMAIL}
      - --certificatesresolvers.buypass.acme.storage=/acme/acme.json
      - --certificatesresolvers.buypass.acme.caserver=https://api.buypass.com/acme/directory
      # HTTP to HTTPS redirect
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
    ports:
      - "80:80"
      - "443:443"
      - "7070:8080"
    depends_on:
      server:
        condition: service_started
      grafana:
        condition: service_started
      portainer:
        condition: service_started
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - traefik-data:/acme
    networks:
      - pemasak
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN:-localhost}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=buypass"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

volumes:
  db-data:
    driver: local
  git-repo-data:
    driver: local
  prom_data:
    driver: local
  grafana-data:
    driver: local
  traefik-data:
    driver: local
  portainer-data:
    driver: local

networks:
  pemasak:
    name: pemasak  # Explicit network name without project prefix
    driver: bridge