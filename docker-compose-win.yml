services:
  db:
    container_name: db-pemasak
    image: postgres:16.0-alpine3.18
    volumes:
      - db-data:/var/lib/postgresql/data
    restart: always
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGPORT: ${DB_PORT}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-d", "${DB_NAME}"]
      interval: 30s
      timeout: 60s
      retries: 5
      start_period: 80s
    networks:
      - pemasak
    ports:
      - "${DB_PORT}:${DB_PORT}"

  atlas:
    container_name: atlas-pemasak
    restart: "no"
    image: arigaio/atlas:0.36.0
    volumes:
      - ./migrations:/migrations
    depends_on:
      db:
        condition: service_healthy
    networks:
      - pemasak
    command:
      [
        "migrate",
        "apply",
        "--dir",
        "file://migrations",
        "--url",
        "postgresql://${DB_USER}:${DB_PASSWORD}@db-pemasak:${DB_PORT}/${DB_NAME}?search_path=public&sslmode=disable",
      ]

  server:
    container_name: server-pemasak
    restart: always
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${APPLICATION_PORT}:${APPLICATION_PORT}"
    environment:
      - "GIT_BASE=./git-repo"
    volumes:
      - ./configuration.yml:/app/configuration.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - ./git-repo:/app/git-repo
    depends_on:
      db:
        condition: service_started
      atlas:
        condition: service_completed_successfully
    networks:
      - pemasak

  # Skip monitoring stack for Windows (Optional)
  prometheus:
    image: prom/prometheus
    container_name: prometheus-pemasak
    restart: always
    networks:
      - pemasak
    ports:
      - "9090:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--storage.tsdb.retention.time=180d"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
    volumes:
      - ./config/prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana-pemasak
    restart: always
    networks:
      - pemasak
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      # Renderer disabled for Windows - no renderer service
    volumes:
      - ./config/grafana:/etc/grafana/provisioning/datasources
      - grafana-data:/var/lib/grafana

  # Docs service (commented out to avoid PNPM issues)
  # docs:
  #   container_name: docs-pemasak
  #   restart: always
  #   build:
  #     context: ./docs-ui
  #     dockerfile: Dockerfile
  #     target: serve
  #   ports:
  #     - "3001:3001"
  #   environment:
  #     - PORT=3001
  #   networks:
  #     - pemasak

volumes:
  db-data:
  prom_data:
  grafana-data:

networks:
  pemasak:
    driver: bridge
